MY SQL

W3 schools MySQL good place to learn
SQL- Structured Query Language
->SQL is a computer language we used to interact with relational database.
->SQL is a tool for organising, managing and archiving data from computer database.

Overview
->DDL(Data definition language)
 ->Data Definition Language (DDL) is a subset of SQL (Structured Query Language) used to define and manage the structure of database objects such as tables, indexes, views, etc.
   It allows users to create, modify, and delete database objects.
	->CREATE: Used to create new database objects like tables, indexes, views, etc.
	->ALTER: Used to modify the structure of existing database objects.
	->DROP: Used to delete database objects.
	->TRUNCATE: Used to remove all records from a table, but it doesn't delete the table structure.
	->RENAME: Used to rename an existing database object.
	->COMMENT: Used to add comments to the data dictionary.
-------------------------------------------------------------
->DML(data manipulating language)
 ->DML stands for Data Manipulation Language. It is a subset of SQL (Structured Query Language) used for manipulating data within the database.
   DML statements are used to query, insert, update, and delete data in database tables.
	->INSERT: Used to add new rows of data into a table.
	->UPDATE: Used to modify existing data in a table.
	->DELETE: Used to remove rows of data from a table.
-----------------------------------------------------------------
->DCL(data control language)
 ->DCL stands for Data Control Language. It's a subset of SQL (Structured Query Language) used for controlling access to data within a database.
DCL statements are primarily concerned with granting and revoking permissions and privileges to users and roles.
	->GRANT: Used to give specific privileges to a user or a role.
	->REVOKE: Used to take back previously granted privileges from a user or a role.
-----------------------------------------------------------------------
->TCL(Transaction control language)
 ->TCL stands for Transaction Control Language. It's a subset of SQL (Structured Query Language) used to manage transactions within a database.
Transactions are sequences of database operations that are treated as a single unit of work, meaning they must either all succeed or all fail.
	->SAVEPOINT: This statement sets a named point within a transaction to which you can roll back if needed. It allows for finer-grained control over transaction rollback
	->ROLLBACK: This statement is used to undo the changes made during the current transaction and restore the database to its state before the transaction began.
	->COMMIT: This statement is used to permanently save the changes made during the current transaction. Once committed, the changes become visible to other transactions
	->SET TRANSACTION: This statement sets properties for the current transaction, such as isolation level and access mode.
---------------------------------------------------------------------------
->DQL(data query language)
 ->DQL stands for Data Query Language. It's a subset of SQL (Structured Query Language) used for querying data from a database.
DQL statements are specifically designed for retrieving data and do not modify the data or the structure of the database.
	->SELECT: This statement is used to retrieve data from one or more tables in the database based on specified criteria.
	  It allows users to specify which columns they want to retrieve, filter rows based on conditions, and sort the results.E

----------------------------------------------------

DB level operations
How to create a DB:
->CREATE DATABASE db_name;

How to drop or delete a DB:
->DROP DATABASE db_name;

How to backupDB
->BACKUP DATABASE db_name TO DISK="D:\1.RasheedAhamed\db_name.bak";  
(this will backup the db in the filpath)

->BACKUP DATABASE db_name TO DISK="D:\1.RasheedAhamed\db_name.bak" WITH DIFFERENTIAL;
(this will also take backup but if you already have backup it will take backup of all new changes)


table operations
->CREATE TABLE table_name(
	column1 datatype,
	column2 datatype,
	column3 datatype,
....);

How to create a table form another table
->CREATE TABLE new_table_name AS
    SELECT column1, column2,...
    FROM existing_table_name
    WHERE ....;
eg:create table testb as
select id,name
from testa;

Delete a table 
->DROP TABLE table_name (the table will be lost)
or
->TRUNCATE TABLE table_name ( the table content lost but structure stays)

-----------------------------------------------------------------------------------------------------
DROP VS TRUNCATE
Purpose: The DROP command is used to remove an entire database object, such as a table, view, index, or stored procedure, from the database.
Effect: When you drop a table, for example, you permanently delete the table structure and all data contained within it. 
This operation cannot be rolled back, and the table will need to be recreated if it is needed again.

Purpose: The TRUNCATE command is used specifically to remove all rows from a table while keeping the table structure intact.
Effect: When you truncate a table, you delete all rows from the table, effectively resetting it to an empty state.
Unlike DROP, the table structure remains intact, and any associated triggers are not fired.
------------------------------------------------------------------------------------------------------

alter: used to alter or modify the table 
how to add extra column 
->ALTER TABLE table_name ADD COLUMN column_name;

drop a single column
->ALTER TABLE table_name DROP COLUMN column_name;

alter/modify a column :
->ALTER TABLE table_name MODIFY column_name dataType;

-----------------------------------------------------------------------------------------------------
Constraints:
->sql constraints are used to specify rules on data in the table.
->Two types  ---- Column level column and table level column.
->column level only apply to column table level apply to whole table.

The following constraints are commonly used in SQL:

->NOT NULL - Ensures that a column cannot have a NULL value
->UNIQUE - Ensures that all values in a column are different
->PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
->FOREIGN KEY - Prevents actions that would destroy links between tables
->CHECK - Ensures that the values in a column satisfies a specific condition
->DEFAULT - Sets a default value for a column if no value is specified
->CREATE INDEX - Used to create and retrieve data from the database very quickly

CREATE TABLE table_name(
column_name DATATYPE CONSTRAINTS,
.....);
---------------------------------------------------------------------------------------------------
Eg:
NOT NULL:
->CREATE TABLE table_name(
orderid INTEGER NOT NULL,
name VARCHAR(255) NOT NULL,
email VARCHAR(255) NOT NULL);	

->ALTER TABLE table_name MODIFY column_name datatype CONSTRAINTS;
EG: -> ALTER TABLE test MODIFY name VARCHAR(255) NOT NULL
-->NOT NULL CAN ONLY BE USED COLUMN LEVEL, we cant use not null in down to make multiple column not null.
---------------------------------------------------------------------------------------
UNIQUE:
we can have multiple constraint in single column
->CREATE TABLE table_name(
orderid INTEGER NOT NULL UNIQUE,
name VARCHAR(255) NOT NULL,
email VARCHAR(255) NOT NULL);	

we can alternatively write like
->CREATE TABLE table_name(
orderId INTEGER NOT NULL,
name VARCHAR(255) NOT NULL,
email VARCHAR(255) NOT NULL,
UNIQUE(orderID));

To make constraints in multiple column we have to give in bottom
->CREATE TABLE table_name(
orderId INTEGER NOT NULL,
name VARCHAR(255) NOT NULL,
email VARCHAR(255) NOT NULL,
CONSTRAINT name UNIQUE(orderID, name));

To drop constraints in multiple column
ALTER TABLE table_name DROP CONSTRAINT constraint_name;

--> By naming a constraint we can have constraint to multiple column, also we can drop the constraint in multiple column simultaneously.
----------------------------------------------------------------------------------------
PRIMARY KEY: it is a combination of NOT NULL AND UNIQUE
-->a table can have only one primary key
eg:
->CREATE TABLE table_name(
orderId INTEGER PRIMARY KEY,
name VARCHAR(255) NOT NULL,
email VARCHAR(255) NOT NULL
);

-->A composite primary key, also known as a compound primary key, is a primary key that consists of multiple columns in a database table. 
Unlike a single-column primary key, which uniquely identifies each row in a table based on the values in a single column, 
a composite primary key uses the combination of values from multiple columns to uniquely identify each row.

eg:
->CREATE TABLE table_name(
orderId INTEGER NOT NULL,
name VARCHAR(255) NOT NULL,
email VARCHAR(255) NOT NULL,
CONSTRAINT name PRIMARY KEY(orderID, name));

->Here orderID and name column combine to form a primary key.

->Composite primary keys are useful in situations where a single column cannot uniquely identify each row, but a combination of multiple columns can
-----------------------------------------------------------------------------------------------------------
FOREIGN KEY :it used to prevent actions that destroy link between table
->A foreign key in a table refers to primary key in another table.
->The table with the foreign key is called the child table, and the table with the primary key is called the referenced or parent table.

FOREIGN KEY (Column1) REFERENCES OtherTable (ReferencedColumn)
eg:
->CREATE TABLE TableName (
    Column1 DataType,
    Column2 DataType,
    ...
    CONSTRAINT FK_Name FOREIGN KEY (Column1) REFERENCES OtherTable (ReferencedColumn)
);

---------------------------------------------------------------------------------------------------------------
CHECK:
->it used to restrict the value that can be placed in the table.

eg:
->CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CHECK (Age>=18)
);

we can have multiple check condition
->CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255),
    CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')
);
-----------------------------------------------------------------------------------------------------------------
DEFAULT:
->Used to set default values in the column
eg:
->CREATE TABLE Orders (
    ID int NOT NULL,
    OrderNumber int NOT NULL,
    OrderDate date DEFAULT GETDATE()
);

------------------------------------------------------------------------------------------------------------------
CREATE INDEX:
->indexes are used to retrieve data from database very quickly.

CREATE INDEX index_name
ON table_name (column1, column2, ...);
-> this will create index can have duplicate values

CREATE UNIQUE INDEX index_name
ON table_name (column1, column2, ...);
->this will only create index with unique values
------------------------------------------------------------------------------------------------------------------
AUTO INCREMENT:
->Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table.
->By default auto increment start from 1.

eg:
->CREATE TABLE Persons (
    Personid int NOT NULL AUTO_INCREMENT,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (Personid)
);

To let auto increment start from a particular value
->ALTER TABLE Persons AUTO_INCREMENT=100;
-------------------------------------------------------------------------------------------------------------------

DATE:
MySQL comes with the following data types for storing a date or a date/time value in the database:

DATE - format YYYY-MM-DD
DATETIME - format: YYYY-MM-DD HH:MI:SS
TIMESTAMP - format: YYYY-MM-DD HH:MI:SS
YEAR - format YYYY or YY
-------------------------------------------------------------------------------------------------------
CREATE VIEW :
-> It is used to view a virtual table based on set of SQL statement.
->CREATE VIEW view_name AS
SELECT column1, column2, ...
FROM table_name
WHERE condition;
eg:
->CREATE VIEW [Brazil Customers] AS
SELECT CustomerName, ContactName
FROM Customers
WHERE Country = 'Brazil';

To update a view 
CREATE OR REPLACE VIEW view_name AS
SELECT column1, column2, ...
FROM table_name
WHERE condition;
--------------------------------------------------------------------------------------------------------
DATATYPES:
-> all the datatypes available in my sql

String Data Types:
->CHAR(size):A FIXED length string (can contain letters, numbers, and special characters).The size parameter specifies the column length in characters - can be from 0 to 255. Default is 1

->VARCHAR(size):A VARIABLE length string (can contain letters, numbers, and special characters).The size parameter specifies the maximum string length in characters - can be from 0 to 65535.

->BINARY(size): Equal to CHAR(), but stores binary byte strings. The size parameter specifies the column length in bytes. Default is 1

->VARBINARY(size):Equal to VARCHAR(), but stores binary byte strings. The size parameter specifies the maximum column length in bytes.

->TINYBLOB: For BLOBs (Binary Large Objects). Max length: 255 bytes

->TINYTEXT: Holds a string with a maximum length of 255 characters

->TEXT(size): Holds a string with a maximum length of 65,535 bytes

->BLOB(size): For BLOBs (Binary Large Objects). Holds up to 65,535 bytes of data

->MEDIUMTEXT: Holds a string with a maximum length of 16,777,215 characters

->MEDIUMBLOB: For BLOBs (Binary Large Objects). Holds up to 16,777,215 bytes of data

->LONGTEXT: Holds a string with a maximum length of 4,294,967,295 characters

->LONGBLOB: For BLOBs (Binary Large Objects). Holds up to 4,294,967,295 bytes of data

->ENUM(val1, val2, val3, ...)	A string object that can have only one value, chosen from a list of possible values. You can list up to 65535 values in an ENUM list. If a value is inserted that is not in the list, a blank value will be inserted. The values are sorted in the order you enter them

->SET(val1, val2, val3, ...)	A string object that can have 0 or more values, chosen from a list of possible values. You can list up to 64 values in a SET list

----------------------------------------------------------------------------------------------------------

Numeric Data Types:
->BIT(size): A bit-value type. The number of bits per value is specified in size. The size parameter can hold a value from 1 to 64. The default value for size is 1.

->TINYINT(size): A very small integer. Signed range is from -128 to 127. Unsigned range is from 0 to 255. The size parameter specifies the maximum display width (which is 255)

->BOOL: Zero is considered as false, nonzero values are considered as true.

->BOOLEAN: Equal to BOOL

->SMALLINT(size): A small integer. Signed range is from -32768 to 32767. Unsigned range is from 0 to 65535. The size parameter specifies the maximum display width (which is 255)

->MEDIUMINT(size): A medium integer. Signed range is from -8388608 to 8388607. Unsigned range is from 0 to 16777215. The size parameter specifies the maximum display width (which is 255)

->INT(size): A medium integer. Signed range is from -2147483648 to 2147483647. Unsigned range is from 0 to 4294967295. The size parameter specifies the maximum display width (which is 255)

->INTEGER(size): Equal to INT(size)

->BIGINT(size): A large integer. Signed range is from -9223372036854775808 to 9223372036854775807. Unsigned range is from 0 to 18446744073709551615. The size parameter specifies the maximum display width (which is 255)

->FLOAT(size, d): A floating point number. The total number of digits is specified in size. The number of digits after the decimal point is specified in the d parameter. This syntax is deprecated in MySQL 8.0.17, and it will be removed in future MySQL versions

->FLOAT(p): A floating point number. MySQL uses the p value to determine whether to use FLOAT or DOUBLE for the resulting data type. If p is from 0 to 24, the data type becomes FLOAT(). If p is from 25 to 53, the data type becomes DOUBLE()

->DOUBLE(size, d): A normal-size floating point number. The total number of digits is specified in size. The number of digits after the decimal point is specified in the d parameter

->DOUBLE PRECISION(size, d)
	 
->DECIMAL(size, d): An exact fixed-point number. The total number of digits is specified in size. The number of digits after the decimal point is specified in the d parameter. The maximum number for size is 65. The maximum number for d is 30. The default value for size is 10. The default value for d is 0.

->DEC(size, d)	Equal to DECIMAL(size,d)

------------------------------------------------------------------------------------------------------------

Date and Time Data Types:

->DATE: A date. Format: YYYY-MM-DD. The supported range is from '1000-01-01' to '9999-12-31'

->DATETIME(fsp): A date and time combination. Format: YYYY-MM-DD hh:mm:ss. The supported range is from '1000-01-01 00:00:00' to '9999-12-31 23:59:59'. Adding DEFAULT and ON UPDATE in the column definition to get automatic initialization and updating to the current date and time

->TIMESTAMP(fsp): A timestamp. TIMESTAMP values are stored as the number of seconds since the Unix epoch ('1970-01-01 00:00:00' UTC). Format: YYYY-MM-DD hh:mm:ss. The supported range is from '1970-01-01 00:00:01' UTC to '2038-01-09 03:14:07' UTC. Automatic initialization and updating to the current date and time can be specified using DEFAULT CURRENT_TIMESTAMP and ON UPDATE 

->CURRENT_TIMESTAMP in the column definition

->TIME(fsp): A time. Format: hh:mm:ss. The supported range is from '-838:59:59' to '838:59:59'

->YEAR: A year in four-digit format. Values allowed in four-digit format: 1901 to 2155, and 0000.

-----------------------------------------------------------------------------------------------------------------

SELECT : 
->Used to select content of table based on condition
eg:
->SELECT * FROM table_name (slect all values and show in table).
->SELECT column1, column2.. from table_name (show the column alone in table ).

-----------------------------------------------------------------------------------
SELECT DISTINCT:
->The SELECT DISTINCT statement is used to return only distinct (different) value
eg:
->SELECT DISTINCT column1, column2, ...
FROM table_name;
-----------------------------------------------------------------------------
WHERE
->The WHERE clause is used to filter records.
->It is used to extract only those records that fulfill a specified condition.
EG:
->SELECT column1, column2, ...
  FROM table_name
  WHERE condition;
we can use these operators
=	Equal	
>	Greater than	
<	Less than	
>=	Greater than or equal	
<=	Less than or equal	
<>	Not equal. Note: In some versions of SQL this operator may be written as !=	
BETWEEN	Between a certain range	
LIKE	Search for a pattern	
IN	To specify multiple possible values for a column
-----------------------------------------------------------------------
ORDER BY
eg:
->SELECT column1, column2, ...
FROM table_name
ORDER BY column1, column2, ... ASC|DESC;
-----------------------------------------------------------------------
AND:
used to do multiple condition in WHERE condition
eg:
->SELECT column1, column2, ...
FROM table_name
WHERE condition1 AND condition2 AND condition3 ...;
---------------------------------------------------------------------
OR:
The OR operator is used to filter records based on more than one condition
eg:
->SELECT column1, column2, ...
FROM table_name
WHERE condition1 OR condition2 OR condition3 ...;
---------------------------------------------------------------------
NOT:
The NOT operator is used in combination with other operators to give the opposite result, also called the negative result.
eg: SELECT column1, column2, ...
FROM table_name
WHERE NOT condition;

----------------------------------------------------------------------------

INSERT INTO
->The INSERT INTO statement is used to insert new records in a table.
eg:
->INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);

-->If you are adding values for all the columns of the table, you do not need to specify the column names
eg:
->INSERT INTO table_name
VALUES (value1, value2, value3);

------------------------------------------------------------------------------
NULL VALUES
->A field with a NULL value is a field with no value.
->It is not possible to test for NULL values with comparison operators, such as =, <, or <>.

SELECT column_names
FROM table_name
WHERE column_name IS NULL;
(or)
SELECT column_names
FROM table_name
WHERE column_name IS NOT NULL;
-------------------------------------------------------------------------------
UPDATE:
update existing values in table
eg:
->UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;
--------------------------------------------------------------------------
DELETE:
->The DELETE statement is used to delete existing records in a table.
eg:
->DELETE FROM table_name WHERE condition;
->DELETE from table_name (this command can delete all records of tabl without deleting table structure like TRUNCATE)
-------------------------------------------------------------------------
SELECT TOP:
->This used to specify number of records to return.
eg:
->SELECT TOP 3 * from customers
->SELECT TOP 50 PERCENT * FROM Customers;(this command will be return 50% of customers).
----------------------------------------------------------------------------
LIMIT
->This also used to specify number of rcords to return.
eg:
>SELECT column_name(s)
FROM table_name
WHERE condition
LIMIT number;
---------------------------------------------------------------------------
AGGREGATE FUNCTIONS:

->An aggregate function is a function that performs a calculation on a set of values, and returns a single value.
->Aggregate functions are often used with the GROUP BY clause of the SELECT statement
->The most commonly used SQL aggregate functions are:

->MIN() - returns the smallest value within the selected column
->MAX() - returns the largest value within the selected column
->COUNT() - returns the number of rows in a set
->SUM() - returns the total sum of a numerical column
->AVG() - returns the average value of a numerical column

---------------------------------------------------------------------------------
MIN:
->this will return return smallest value in selected column.
eg:
SELECT MIN(column_name) FROM table_name ;
--------------------------------------------------------------
MAX:
->This return largest value in selected column.
eg:
SELECT MAX(column_name) FROM table_name;
-------------------------------------------------------------
AS:
 we can make alias (name to the column) 
eg:
->SELECT MIN(Price) AS SmallestPrice FROM Products;
----------------------------------------------------
COUNT:
->this return the number of records in the column.
eg:
->SELECT COUNT(column_name)
FROM table_name
WHERE condition;
-------------------------------------------------------------
SUM:
->return total numeric sum of records
->The parameter inside the SUM() function can also be an expression.
eg:
->SELECT SUM(column_name)
FROM table_name
WHERE condition;
 eg:
->SELECT SUM(Quantity * 10)
FROM OrderDetails;
Note :if you try this on string error:Data type mismatch in criteria expression.
----------------------------------------------------------------
AVG:
->The AVG() function returns the average value of a numeric column.
eg:
->SELECT AVG(column_name)
FROM table_name
WHERE condition;

-----------------------------------------------------------------
LIKE:
->The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.
->There are two wildcards often used in conjunction with the LIKE operator:
	->The percent sign % represents zero, one, or multiple characters
	->The underscore sign _ represents one, single character

eg:
->SELECT column1, column2, ...
FROM table_name
WHERE columnN LIKE pattern;
--------------------------------------------------------------------
Wildcard characters:
->A wildcard character is used to substitute one or more characters in a string.
-> %	Represents zero or more characters
-> _	Represents a single character
-> []	Represents any single character within the brackets *
-> !	Represents any character not in the brackets *
-> -	Represents any single character within the specified range *
-> {}	Represents any escaped character **
-----------------------------------------------------------------------
IN:
->The IN operator allows you to specify multiple values in a WHERE clause.

eg:
->SELECT column_name(s)
FROM table_name
WHERE column_name IN (value1, value2, ...);

->NOT IN operator is opposite of it
------------------------------------------------------------------------

BETWEEN:
->The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.

eg:
->SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2;

->NOT BETWEEN is opposite of it.
-------------------------------------------------------------------------

SQL alias
->SQL aliases are used to give a table, or a column in a table, a temporary name.
->Aliases are often used to make column names more readable.
->An alias only exists for the duration of that query.

eg:
->SELECT column_name AS alias_name
FROM table_name;

eg:
->SELECT column_name(s)
FROM table_name AS alias_name;

----------------------------------------------------------------------
CONCAT
->used to concatenate column values and display it together

eg:
->SELECT CustomerName, CONCAT(Address,', ',PostalCode,', ',City,', ',Country) AS Address
FROM Customers;
--------------------------------------------------------------------
SQL JOINS
->A JOIN clause is used to combine rows from two or more tables, based on a related column between them.

types of joins
->(INNER) JOIN: Returns records that have matching values in both tables
->LEFT (OUTER) JOIN: Returns all records from the left table, and the matched records from the right table
->RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table
->FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table

-------------------------------------------------------------------------
INNER JOIN:
->The INNER JOIN keyword selects records that have matching values in both tables
->JOIN and INNER JOIN will return the same result.
eg:
->SELECT column_name(s)
FROM table1
INNER JOIN table2
ON table1.column_name = table2.column_name;

---------------------------------------------------------------------------
LEFT JOIN
->The LEFT JOIN keyword returns all records from the left table (table1), and the matching records from the right table (table2). 
->The result is 0 records from the right side, if there is no match.

eg:
->SELECT column_name(s)
FROM table1
LEFT JOIN table2
ON table1.column_name = table2.column_name;

->Note: The LEFT JOIN keyword returns all records from the left table (Customers), even if there are no matches in the right table (Orders).

--------------------------------------------------------------------------------
RIGHT JOIN
->The RIGHT JOIN keyword returns all records from the right table (table2), and the matching records from the left table (table1). 
->The result is 0 records from the left side, if there is no match.

EG:
->SELECT column_name(s)
FROM table1
RIGHT JOIN table2
ON table1.column_name = table2.column_name;

->Note: The RIGHT JOIN keyword returns all records from the right table (Employees), even if there are no matches in the left table (Orders).

----------------------------------------------------------------------------------------
FULL OUTER JOIN:
->The FULL OUTER JOIN keyword returns all records when there is a match in left (table1) or right (table2) table records.
->FULL OUTER JOIN and FULL JOIN are the same.

eg:
->SELECT column_name(s)
FROM table1
FULL OUTER JOIN table2
ON table1.column_name = table2.column_name
WHERE condition;

-------------------------------------------------------------------------------------------------
UNION:
->The UNION operator is used to combine the result-set of two or more SELECT statements.
->The UNION operator selects only distinct values by default. To allow duplicate values, use UNION ALL:


eg:
->SELECT column_name(s) FROM table1
UNION
SELECT column_name(s) FROM table2;
--------------------------------------------------------------------------------------------
GROUP BY:
->"GROUP BY" is a clause in SQL (Structured Query Language) that is used with the SELECT statement to organize rows into groups based on the values of one or more columns. 
->It's commonly used in conjunction with aggregate functions like SUM(), COUNT(), AVG(), MAX(), or MIN() to perform calculations on each group.

eg:
->SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
ORDER BY column_name(s);

---------------------------------------------------------------------------------------------------
HAVING:
->The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.

eg:
->SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
HAVING condition
ORDER BY column_name(s);

--------------------------------------------------------------------------------------------------
EXISTS:
->The EXISTS operator is used to test for the existence of any record in a subquery.
->The EXISTS operator returns TRUE if the subquery returns one or more records.

eg:
->SELECT column_name(s)
FROM table_name
WHERE EXISTS
(SELECT column_name FROM table_name WHERE condition);

----------------------------------------------------------------------------------------------
ALL:
->The ALL operator:
->returns a boolean value as a result
->returns TRUE if ALL of the subquery values meet the condition
->is used with SELECT, WHERE and HAVING statements

eg:
->SELECT column_name(s)
FROM table_name
WHERE column_name operator ALL
  (SELECT column_name
  FROM table_name
  WHERE condition);

-------------------------------------------------------------------------------------------
ANY:
->The ANY operator:
->returns a boolean value as a result
->returns TRUE if ANY of the subquery values meet the condition

eg:
->SELECT column_name(s)
FROM table_name
WHERE column_name operator ANY
  (SELECT column_name
  FROM table_name
  WHERE condition);

-----------------------------------------------------------------------------------
SELECT INTO:
->The SELECT INTO statement copies data from one table into a new table.

eg:
->SELECT column1, column2, column3, ...
INTO newtable [IN externaldb]
FROM oldtable
WHERE condition;
->note use * in place of column1, column... to completely copy
------------------------------------------------------------------------------
INSERT INTO:
->The INSERT INTO SELECT statement copies data from one table and inserts it into another table.
->The INSERT INTO SELECT statement requires that the data types in source and target tables match.
->Note: The existing records in the target table are unaffected.

eg:
->INSERT INTO table2 (column1, column2, column3, ...)
SELECT column1, column2, column3, ...
FROM table1
WHERE condition;

----------------------------------------------------------------------------

CASE:

->The CASE expression goes through conditions and returns a value when the first condition is met (like an if-then-else statement). 
->So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause.
->If there is no ELSE part and no conditions are true, it returns NULL.

eg:
->CASE
    WHEN condition1 THEN result1
    WHEN condition2 THEN result2
    WHEN conditionN THEN resultN
    ELSE result
END;

-----------------------------------------------------------------------------------------------------------------------------

STORED PROCEDURE:

->A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.

eg:
->CREATE PROCEDURE procedure_name
AS
sql_statement
GO;

to execute ->EXEC procedure_name;

--------------------------------------------------------------------------------------------------------------------
COMMENT LINE:

-> --using this make a comment line
/*this is for 
multiple line commment*/
-------------------------------------------------------------------------





























